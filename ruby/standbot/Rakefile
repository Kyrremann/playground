require 'rspec/core'
require 'rspec/core/rake_task'

RSpec::Core::RakeTask.new(:spec) do |spec|
  spec.pattern = FileList['spec/**/*_spec.rb']
end

require 'rubocop/rake_task'
RuboCop::RakeTask.new

task default: %i[rubocop spec]

namespace :db do
  require "sequel"
  database_url = ENV['DATABASE_URL'] ? ENV['DATABASE_URL'] : 'postgres://postgres:postgres@localhost:5432/postgres'
  
  desc "Prints current schema version"
  task :version do
    Sequel.extension :migration
    DB = Sequel.connect(database_url)
    version = if DB.tables.include?(:schema_info)
                DB[:schema_info].first[:version]
              end || 0

    puts "Schema Version: #{version}"
  end

  desc "Perform migration up to latest migration available"
  task :migrate do
    Sequel.extension :migration
    DB = Sequel.connect(database_url)
    Sequel::Migrator.run(DB, "./db/migrations")
    Rake::Task['db:version'].execute
  end
  
  desc "Perform rollback to specified target or full rollback as default"
  task :rollback, :target do |t, args|
    Sequel.extension :migration
    DB = Sequel.connect(database_url)
    args.with_defaults(:target => 0)

    Sequel::Migrator.run(DB, "./db/migrations", :target => args[:target].to_i)
    Rake::Task['db:version'].execute
  end

  desc "Perform migration reset (full rollback and migration)"
  task :reset do
    Sequel.extension :migration
    DB = Sequel.connect(database_url)
    Sequel::Migrator.run(DB, "./db/migrations", :target => 0)
    Sequel::Migrator.run(DB, "./db/migrations")
    Rake::Task['db:version'].execute
  end    
end
